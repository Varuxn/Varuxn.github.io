<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Varuxn</title>
        <subtitle>目が離せません</subtitle>
        <icon>http://varuxn.github.io/assets/favicon.ico</icon>
        <link>http://Varuxn.github.io</link>
        <author>
          <name>Varuxn</name>
        </author>
        <description>Love and Freedom</description>
        <language>en</language>
        <pubDate>Sun, 22 Dec 2024 15:35:42 +0800</pubDate>
        <lastBuildDate>Sun, 22 Dec 2024 15:35:42 +0800</lastBuildDate>
        <item>
            <guid isPermalink="true">http://varuxn.github.io/2024/12/22/WSL%E6%8D%A2%E8%A1%8C%E7%AC%A6/</guid>
            <title>Win11 下 WSL 换行符问题</title>
            <link>http://varuxn.github.io/2024/12/22/WSL%E6%8D%A2%E8%A1%8C%E7%AC%A6/</link>
            <pubDate>Sun, 22 Dec 2024 15:35:42 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Win11-下-WSL-换行符问题&#34;&gt;&lt;a href=&#34;#Win11-下-WSL-换行符问题&#34; class=&#34;headerlink&#34; title=&#34;Win11 下 WSL 换行符问题&#34;&gt;&lt;/a&gt;Win11 下 WSL 换行符问题&lt;/h1&gt;&lt;p&gt;先说一下最终的解决方案：&lt;/p&gt;
&lt;h2 id=&#34;使用-WSL-强制创建-LF-格式文件&#34;&gt;&lt;a href=&#34;#使用-WSL-强制创建-LF-格式文件&#34; class=&#34;headerlink&#34; title=&#34;使用 WSL 强制创建 LF 格式文件&#34;&gt;&lt;/a&gt;使用 WSL 强制创建 LF 格式文件&lt;/h2&gt;&lt;p&gt;在 WSL 环境中运行以下命令，确保文件始终以 LF 格式保存：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;echo &amp;#39;export FILEFORMAT=unix&amp;#39; &amp;gt;&amp;gt; ~/.bashrc
source ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;操作完之后记得把之前的文件重新生成一遍。&lt;/p&gt;
&lt;h2 id=&#34;VScode-设置&#34;&gt;&lt;a href=&#34;#VScode-设置&#34; class=&#34;headerlink&#34; title=&#34;VScode 设置&#34;&gt;&lt;/a&gt;VScode 设置&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;设置-&amp;gt;用户设置-&amp;gt;文本编辑器-&amp;gt;文件-&amp;gt;eol&lt;/strong&gt; 选项设置为 &lt;code&gt;\n&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;或者说只修改单个文件的话直接：&lt;/p&gt;
&lt;p&gt;打开需要转换的文件，查看右下角状态栏的行尾符格式（CRLF 或 LF），点击行尾符，弹出选项框，选择 LF ，保存文件（Ctrl+S）。&lt;/p&gt;
&lt;h2 id=&#34;Git-自动转换&#34;&gt;&lt;a href=&#34;#Git-自动转换&#34; class=&#34;headerlink&#34; title=&#34;Git 自动转换&#34;&gt;&lt;/a&gt;Git 自动转换&lt;/h2&gt;&lt;p&gt;设置 Git 转换规则，配置 Git 仅在提交时将 CRLF 转换为 LF：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;git config --global core.autocrlf input
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这会在提交时将行尾符转换为 LF，但保留工作区文件的 CRLF。&lt;/p&gt;
&lt;p&gt;如果需要工作区文件也统一为 LF：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;git config --global core.autocrlf false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后重新克隆代码库或运行以下命令刷新文件：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;git rm --cached -r .
git reset --hard
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://varuxn.github.io/2024/12/21/Hexo-ShokaX%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/</guid>
            <title>Hexo-ShokaX 搭建笔记</title>
            <link>http://varuxn.github.io/2024/12/21/Hexo-ShokaX%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/</link>
            <pubDate>Sat, 21 Dec 2024 23:23:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Hexo-ShokaX-搭建笔记&#34;&gt;&lt;a href=&#34;#Hexo-ShokaX-搭建笔记&#34; class=&#34;headerlink&#34; title=&#34;Hexo-ShokaX 搭建笔记&#34;&gt;&lt;/a&gt;Hexo-ShokaX 搭建笔记&lt;/h1&gt;&lt;p&gt;shokax 主题是基于 shoka 主题的，所以很多东西要参照 shoka 的文档，一些问题也需要通过查找有关 shoka 的资料处理。&lt;/p&gt;
&lt;p&gt;ShockX 的官方使用文档 &lt;a href=&#34;https://docs-hexo.shokax.top/getting-started/&#34;&gt;https://docs-hexo.shokax.top/getting-started/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;更加详细的使用文档 &lt;a href=&#34;https://docs.kaitaku.xyz/guide/theme.html&#34;&gt;https://docs.kaitaku.xyz/guide/theme.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;基本上上面两个就足够解决大部分问题了&lt;/p&gt;
&lt;p&gt;一些其他的博客：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://yuan-uyume.github.io/2023/08/26/zhibei/hexo%E4%B8%BB%E9%A2%98shokaX%E9%85%8D%E7%BD%AE%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8C%97&#34;&gt;https://yuan-uyume.github.io/2023/08/26/zhibei/hexo主题shokaX配置踩坑指北&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下面这篇博客是配置shoka主题的，他有关 package.json 的是不适用的，但是相关插件的安装还是可以借鉴的&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://pigpigletsgo.github.io/hexo/shoka/%E9%85%8D%E7%BD%AEshoka%E4%B8%BB%E9%A2%98/&#34;&gt;https://pigpigletsgo.github.io/hexo/shoka/配置shoka主题/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;代码块渲染&#34;&gt;&lt;a href=&#34;#代码块渲染&#34; class=&#34;headerlink&#34; title=&#34;代码块渲染&#34;&gt;&lt;/a&gt;代码块渲染&lt;/h2&gt;&lt;p&gt;发现代码块还是最基础的，并没有采用 markdown-it 渲染，需要安装 &lt;code&gt;hexo-renderer-multi-markdown-it&lt;/code&gt; 。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;pnpm install hexo-renderer-multi-markdown-it
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;背景图片&#34;&gt;&lt;a href=&#34;#背景图片&#34; class=&#34;headerlink&#34; title=&#34;背景图片&#34;&gt;&lt;/a&gt;背景图片&lt;/h2&gt;&lt;p&gt;运行 &lt;code&gt;hexo s&lt;/code&gt; 命令在本地看主页等图片是没有问题的但是向github上传之后出现了问题，我们可以参照使用文档里添加自己的背景图片&lt;/p&gt;
&lt;p&gt;这就不得不提到图床了，以下是一个使用 PicGo 构建图床的方法的博客：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/xdnxl/article/details/129466060&#34;&gt;https://blog.csdn.net/xdnxl/article/details/129466060&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://varuxn.github.io/2024/12/21/VMware-WSL/</guid>
            <title>关于 VMware 与 WSL 在 Win11 虚拟化的一些问题</title>
            <link>http://varuxn.github.io/2024/12/21/VMware-WSL/</link>
            <pubDate>Sat, 21 Dec 2024 20:47:19 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;关于-VMware-与-WSL-在-Win11-虚拟化的一些问题&#34;&gt;&lt;a href=&#34;#关于-VMware-与-WSL-在-Win11-虚拟化的一些问题&#34; class=&#34;headerlink&#34; title=&#34;关于 VMware 与 WSL 在 Win11 虚拟化的一些问题&#34;&gt;&lt;/a&gt;关于 VMware 与 WSL 在 Win11 虚拟化的一些问题&lt;/h1&gt;&lt;h2 id=&#34;VMware-虚拟化问题&#34;&gt;&lt;a href=&#34;#VMware-虚拟化问题&#34; class=&#34;headerlink&#34; title=&#34;VMware 虚拟化问题&#34;&gt;&lt;/a&gt;VMware 虚拟化问题&lt;/h2&gt;&lt;p&gt;之前用虚拟机做计网 GNS3 组网实验的时候需要用到虚拟机虚拟化，然后一直显示虚拟化不成功，检查过 BIOS 等设置均显示没有错误。&lt;/p&gt;
&lt;p&gt;后来发现是 Windows 自带的虚拟机功能与 VMware 的虚拟化功能产生了冲突，处理办法如下：&lt;/p&gt;
&lt;p&gt;有关 Intel-VX 的问题，首先是在 BIOS 里打开相关选项&lt;/p&gt;
&lt;p&gt;然后 VMware 中也需要在设置里面开启&lt;/p&gt;
&lt;p&gt;接下来就是关闭 Windows 自带的虚拟机功能 &lt;strong&gt;控制面板-&amp;gt;程序-&amp;gt;启用或关闭Windows功能&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hyper-V和Windows虚拟机监控程序平台取消勾选&lt;/p&gt;
&lt;p&gt;如果找不到Hyper-V则管理员身份打开powershell输入命令&lt;code&gt;bcdedit /set hypervisorlaunchtype off&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;最后重启电脑。&lt;/p&gt;
&lt;p&gt;参照博客：&lt;a href=&#34;https://blog.csdn.net/m0_53022813/article/details/136936036&#34;&gt;https://blog.csdn.net/m0_53022813/article/details/136936036&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;WSL-虚拟化问题&#34;&gt;&lt;a href=&#34;#WSL-虚拟化问题&#34; class=&#34;headerlink&#34; title=&#34;WSL 虚拟化问题&#34;&gt;&lt;/a&gt;WSL 虚拟化问题&lt;/h2&gt;&lt;p&gt;在 VMware 虚拟化问题前，配置过一次 ubuntu 的 WSL 运行起来也没问题，后来因为一些原因卸载了。&lt;/p&gt;
&lt;p&gt;现在重新下回来的时候发现竟然又碰到了虚拟化的问题，然后就发现大概是上述 VMware 虚拟化关闭了本机一些虚拟化功能的问题。&lt;/p&gt;
&lt;p&gt;解决办法如下：&lt;/p&gt;
&lt;p&gt;打开 Windows 自带的虚拟机功能 &lt;strong&gt;控制面板-&amp;gt;程序-&amp;gt;启用或关闭Windows功能&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hyper-V和Windows虚拟机监控程序平台勾选&lt;/p&gt;
&lt;p&gt;如果找不到Hyper-V则管理员身份打开powershell输入命令&lt;code&gt;bcdedit /set hypervisorlaunchtype auto&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;最后重启电脑。&lt;/p&gt;
&lt;h2 id=&#34;后记&#34;&gt;&lt;a href=&#34;#后记&#34; class=&#34;headerlink&#34; title=&#34;后记&#34;&gt;&lt;/a&gt;后记&lt;/h2&gt;&lt;p&gt;我的是华硕天选4的笔记本，不知道其他的电脑会不会出现类似的问题。。。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://varuxn.github.io/2024/12/21/Visual%20Studio%20C++%20%E6%B1%87%E7%BC%96%20%E6%B7%B7%E5%90%88%E7%BC%96%E7%A8%8B/</guid>
            <title>Visual Studio C++ 汇编 混合编程</title>
            <link>http://varuxn.github.io/2024/12/21/Visual%20Studio%20C++%20%E6%B1%87%E7%BC%96%20%E6%B7%B7%E5%90%88%E7%BC%96%E7%A8%8B/</link>
            <pubDate>Sat, 21 Dec 2024 20:46:38 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Visual-Studio-C-汇编-混合编程&#34;&gt;&lt;a href=&#34;#Visual-Studio-C-汇编-混合编程&#34; class=&#34;headerlink&#34; title=&#34;Visual Studio C++ 汇编 混合编程&#34;&gt;&lt;/a&gt;Visual Studio C++ 汇编 混合编程&lt;/h1&gt;&lt;h2 id=&#34;实验要求&#34;&gt;&lt;a href=&#34;#实验要求&#34; class=&#34;headerlink&#34; title=&#34;实验要求&#34;&gt;&lt;/a&gt;实验要求&lt;/h2&gt;&lt;p&gt;请用汇编语言编写实现GCD递推公式的子程序，对入口和出口参数形式不做要求，但需要用 C 语言函数来获取输入、调用汇编递推子程序，并且用 C 语言显示子程序返回的结果。&lt;/p&gt;
&lt;h2 id=&#34;Visual-Studio-2020-下载&#34;&gt;&lt;a href=&#34;#Visual-Studio-2020-下载&#34; class=&#34;headerlink&#34; title=&#34;Visual Studio 2020 下载&#34;&gt;&lt;/a&gt;Visual Studio 2020 下载&lt;/h2&gt;&lt;p&gt;下载时勾选C++桌面开发选项。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://images.cnblogs.com/cnblogs_com/Varuxn/2017186/o_241219131722_1.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;环境配置&#34;&gt;&lt;a href=&#34;#环境配置&#34; class=&#34;headerlink&#34; title=&#34;环境配置&#34;&gt;&lt;/a&gt;环境配置&lt;/h2&gt;&lt;p&gt;选择 &lt;strong&gt;文件-&amp;gt;新建-&amp;gt;项目&lt;/strong&gt; ，语言选择 &lt;strong&gt;C++&lt;/strong&gt; ，选择 &lt;strong&gt;空项目&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://images.cnblogs.com/cnblogs_com/Varuxn/2017186/o_241219132228_2.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改环境配置为 &lt;strong&gt;x86&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://images.cnblogs.com/cnblogs_com/Varuxn/2017186/o_241219133753_6.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;在项目中新建 &lt;code&gt;gcd.asm&lt;/code&gt; 和 &lt;code&gt;t.cpp&lt;/code&gt; 或将这两个文件添加到项目中。&lt;/p&gt;
&lt;p&gt;右键项目，选择 &lt;strong&gt;生成依赖项-&amp;gt;生成自定义&lt;/strong&gt;，勾选 &lt;strong&gt;masm&lt;/strong&gt; 选项。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://images.cnblogs.com/cnblogs_com/Varuxn/2017186/o_241219132933_3.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://images.cnblogs.com/cnblogs_com/Varuxn/2017186/o_241219133303_4.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;右键 &lt;code&gt;gcd.asm&lt;/code&gt; 文件，选择 &lt;strong&gt;属性&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;从生成中排除&lt;/strong&gt; 选择 &lt;strong&gt;否&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;项类型&lt;/strong&gt; 选择 &lt;strong&gt;Microsoft Macro Assembler&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://images.cnblogs.com/cnblogs_com/Varuxn/2017186/o_241219133637_5.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;在编译运行的时候出现如下错误:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;scanf‘: This function or variable may be unsafe.Consider using scanf_s instead&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;相关问题的解答 &lt;a href=&#34;https://blog.csdn.net/p3145417646/article/details/131686176&#34;&gt;Link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可以在 &lt;code&gt;.cpp&lt;/code&gt; 文件的头文件加入 &lt;code&gt;#define _CRT_SECURE_NO_WARNINGS&lt;/code&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;Code&#34;&gt;&lt;a href=&#34;#Code&#34; class=&#34;headerlink&#34; title=&#34;Code&#34;&gt;&lt;/a&gt;Code&lt;/h2&gt;&lt;p&gt;cpp 文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;#define _CRT_SECURE_NO_WARNINGS
#include &amp;lt;stdio.h&amp;gt;

// 声明外部汇编函数
extern &amp;quot;C&amp;quot; int GCD(int a, int b);

int main() &amp;#123;
    int a, b, result;

    // 获取用户输入
    printf(&amp;quot;请输入两个整数以计算其最大公约数：&amp;quot;);
    scanf(&amp;quot;%d %d&amp;quot;, &amp;amp;a, &amp;amp;b);

    // 调用汇编函数
    result = GCD(a, b);

    // 输出结果
    printf(&amp;quot;数字 %d 和 %d 的最大公约数是：%d\n&amp;quot;, a, b, result);

    return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;asm文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;asm&#34;&gt;.model flat, c
.code
public GCD       ; 声明函数为公共，可以被外部调用

GCD proc
    mov eax, [esp+4] ; 获取第一个参数 a (位于 esp+4)
    mov ebx, [esp+8] ; 获取第二个参数 b (位于 esp+8)

gcd_loop:
    cmp ebx, 0       ; 如果 b == 0，跳转到结束
    je gcd_done
    xor edx, edx     ; 清空 edx，避免余数计算时的干扰
    div ebx          ; eax = eax / ebx，余数存入 edx
    mov eax, ebx     ; a = b
    mov ebx, edx     ; b = a % b
    jmp gcd_loop

gcd_done:
    ret              ; 返回结果存于 eax
GCD endp

end
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://varuxn.github.io/2024/12/21/TFTP-Server/</guid>
            <title>HUST 计网 TFTP Server 实验总结</title>
            <link>http://varuxn.github.io/2024/12/21/TFTP-Server/</link>
            <pubDate>Sat, 21 Dec 2024 20:45:40 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;TFTP-Server-总结&#34;&gt;&lt;a href=&#34;#TFTP-Server-总结&#34; class=&#34;headerlink&#34; title=&#34;TFTP Server 总结&#34;&gt;&lt;/a&gt;TFTP Server 总结&lt;/h1&gt;&lt;h2 id=&#34;前言&#34;&gt;&lt;a href=&#34;#前言&#34; class=&#34;headerlink&#34; title=&#34;前言&#34;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;其实我菜的要死，然后在各位大佬的帮助下勉强完成了任务，然后过来水一篇博客，算是记录一下，也可以看作是蹭流量哈哈哈哈，可能主要讲一讲配置的问题。&lt;/p&gt;
&lt;h2 id=&#34;前置环境&#34;&gt;&lt;a href=&#34;#前置环境&#34; class=&#34;headerlink&#34; title=&#34;前置环境&#34;&gt;&lt;/a&gt;前置环境&lt;/h2&gt;&lt;p&gt;也就是两个软件,Tftpd64 和 clumsy 以及在Windows环境下的编译问题。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://images.cnblogs.com/cnblogs_com/Varuxn/2401763/o_241117145120_QQ20241117-225039.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;Tftpd64&#34;&gt;&lt;a href=&#34;#Tftpd64&#34; class=&#34;headerlink&#34; title=&#34;Tftpd64&#34;&gt;&lt;/a&gt;Tftpd64&lt;/h3&gt;&lt;p&gt;Tftpd64 的功能是当做TFTP通信中的客户端，各个参数的含义如下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;txt&#34;&gt;Host 127.0.0.1 即为本机地址
Port 69 一般是69，如果端口冲突也可以选择其他的，需要与服务器的 port 一致
Local File 选择的是想要从客户端传送到服务器的文件的地址，从服务器传过来的文件也会放在同一目录下。
Remote File 则是想要请求的文件的名称
Block Size 512 与实验要求的一致
Get 就是从服务器索要文件
Put 就是将文件传送给服务器
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://images.cnblogs.com/cnblogs_com/Varuxn/2401763/o_241117145302_tftp.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;clumsy&#34;&gt;&lt;a href=&#34;#clumsy&#34; class=&#34;headerlink&#34; title=&#34;clumsy&#34;&gt;&lt;/a&gt;clumsy&lt;/h3&gt;&lt;p&gt;clumsy 则是模拟传输过程的错误的软件。&lt;/p&gt;
&lt;p&gt;值得的一提的是，在调试代码的时候一直开着这个软件的丢包，导致我开着VPN却用不了GPT，甚至使用Baidu&amp;#x2F;Google都困难。用网易云听歌也是有电流声，一开始还怀疑是耳机的问题哈哈哈。&lt;/p&gt;
&lt;p&gt;各个参数在文档中已经声明了&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;txt&#34;&gt;
延迟(Lag)，把数据包缓存一段时间后再发出，这样能够模拟网络延迟的状况。
掉包(Drop)，随机丢弃一些数据。
节流(Throttle)，把一小段时间内的数据拦截下来后再在之后的同一时间一同发出去。
重发(Duplicate)，随机复制一些数据并与其本身一同发送。
乱序(Out of order)，打乱数据包发送的顺序。
篡改(Tamper)，随机修改小部分的包裹内容。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运行起来大概是下图这个样子，测试的时候用哪个就把哪个勾上然后start就可以了&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://images.cnblogs.com/cnblogs_com/Varuxn/2401763/o_241117150143_QQ20241117-230131.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;编译问题&#34;&gt;&lt;a href=&#34;#编译问题&#34; class=&#34;headerlink&#34; title=&#34;编译问题&#34;&gt;&lt;/a&gt;编译问题&lt;/h3&gt;&lt;p&gt;老师应该是下发一个 client 的 .c 文件的，但是大家会发现无法运行，因为老师下发的软件是需要在 linux 环境下运行。如果想要在 Win11 环境下运行需要更改一些头文件，然后代码里有些东西需要修改，这些内容不太重要，不如直接在下文讨论在写 Server 文件时该注意什么。&lt;/p&gt;
&lt;h2 id=&#34;代码书写&#34;&gt;&lt;a href=&#34;#代码书写&#34; class=&#34;headerlink&#34; title=&#34;代码书写&#34;&gt;&lt;/a&gt;代码书写&lt;/h2&gt;&lt;p&gt;首先需要声明我的代码的文件是写到了 &lt;code&gt;t.cpp&lt;/code&gt; 当中，编译的话使用的命令是 &lt;code&gt;g++ t.cpp -o tftp_server -lws2_32&lt;/code&gt; ，会生成一个 &lt;code&gt;tftp_server.exe&lt;/code&gt; 文件，直接运行就可以得到客户端，很遗憾本人菜菜没有做可视化界面&amp;#x2F;kel。&lt;/p&gt;
&lt;p&gt;代码的书写参照了 &lt;a href=&#34;https://doraemonqwq.cn/2024/10/07/2024-10-7-network/&#34;&gt;灰灰的博客&lt;/a&gt;，并且对某些部分做了自己的一些修改。&lt;/p&gt;
&lt;h3 id=&#34;一些定义以及调用&#34;&gt;&lt;a href=&#34;#一些定义以及调用&#34; class=&#34;headerlink&#34; title=&#34;一些定义以及调用&#34;&gt;&lt;/a&gt;一些定义以及调用&lt;/h3&gt;&lt;p&gt;一些用到的库，还有一些常量的声明，格外需要注意&lt;code&gt;#pragma comment(lib, &amp;quot;ws2_32.lib&amp;quot;)&lt;/code&gt;命令，这个命令在 Windows 中是必须的，其中IP写成自己主机的IP。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;#include &amp;lt;WinSock2.h&amp;gt;
#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;psdk_inc/_ip_types.h&amp;gt;
#include &amp;lt;psdk_inc/_socket_types.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;wingdi.h&amp;gt;
#include &amp;lt;winsock2.h&amp;gt;
#include &amp;lt;ws2tcpip.h&amp;gt;
#include &amp;lt;windows.h&amp;gt;
#include &amp;lt;bits/stdc++.h&amp;gt;

#pragma comment(lib, &amp;quot;ws2_32.lib&amp;quot;)

#define BUF_SIZE 516
#define DATA_SIZE 512
#define OPCODE_RRQ 1
#define OPCODE_WRQ 2
#define OPCODE_DATA 3
#define OPCODE_ACK 4
#define OPCODE_ERROR 5
#define MAX_RETRIES 10
#define TIMEOUT 5

static const char *tftp_error_msg[] = &amp;#123;
    &amp;quot;Undefined error&amp;quot;,
    &amp;quot;File not found&amp;quot;,
    &amp;quot;Access violation&amp;quot;,
    &amp;quot;Disk full or allocation error&amp;quot;,
    &amp;quot;Illegal TFTP operation&amp;quot;,
    &amp;quot;Unknown transfer ID&amp;quot;,
    &amp;quot;File already exists&amp;quot;,
    &amp;quot;No such user&amp;quot;
&amp;#125;;
const char IP[30]=&amp;quot;&amp;quot;;
const int PORT=6699;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;TFTP的初始化&#34;&gt;&lt;a href=&#34;#TFTP的初始化&#34; class=&#34;headerlink&#34; title=&#34;TFTP的初始化&#34;&gt;&lt;/a&gt;TFTP的初始化&lt;/h3&gt;&lt;p&gt;下面这段代码也是 Windows 环境下不同于 Linux 的部分。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;int TFTP_init()
&amp;#123;
    WSADATA wsaData;
    int result = WSAStartup(MAKEWORD(2, 2), &amp;amp;wsaData); // 初始化 Winsock
    if (result != 0) &amp;#123;
        cerr&amp;lt;&amp;lt;&amp;quot;WSAStartup failed: &amp;quot;&amp;lt;&amp;lt;result&amp;lt;&amp;lt;endl;
        return 1;
    &amp;#125;
    printf(&amp;quot;Winsock initialized.\n&amp;quot;);
    return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后就是根据服务器的地址和接口绑定套接字（这段内容在代码的 Server 类的 init 部分），然后就是不断循环接收来自客户端的请求（Server 类的 work 部分）。&lt;/p&gt;
&lt;p&gt;TFTP_Solve 类则是对于客户端的每个请求进行分类处理，而 ERRORthings 则是对错误信息进行处理后发送给客户端。接下来重点介绍 RRQ 和 WRQ 类。&lt;/p&gt;
&lt;p&gt;由于实验有个要求是需要记录传输数据的速度，为此设计了一个 &lt;code&gt;gettimeofday&lt;/code&gt; 函数用来记录每次传输的起始和截止时间用于计算速度。&lt;/p&gt;
&lt;h3 id=&#34;RRQ&#34;&gt;&lt;a href=&#34;#RRQ&#34; class=&#34;headerlink&#34; title=&#34;RRQ&#34;&gt;&lt;/a&gt;RRQ&lt;/h3&gt;&lt;p&gt;首先需要知道的是，我们将一个文件分成了若干块，每块的大小是 512bytes ，不断循环读取文件直到读入的字符数小于 512 。&lt;/p&gt;
&lt;p&gt;先将操作码和块的编号写到首部&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;memset(data_pac, 0, BUF_SIZE);
*(unsigned short*)data_pac = htons(OPCODE_DATA);  // 操作码：数据包
*(unsigned short*)(data_pac + 2) = htons(block);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后开始读入文件中的信息，并且处理错误信息，接下来就是传输，只要没有收到确认包或者说重传的次数小于我们要求的最大重传次数时则重传。&lt;code&gt;while(!ack&amp;amp;&amp;amp;tot_retry&amp;lt;MAX_RETRIES)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用 sendto 函数发送当前块到客户端&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;sendto(socketfd, data_pac, bytes_read + 4, 0, (sockaddr*)&amp;amp;client_addr, client_addr_len);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后使用 select 函数检测&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;int select_result = select(socketfd + 1, &amp;amp;read_fds, NULL, NULL, &amp;amp;tv);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;检查是否传输的数据有差错，并对错误类型进行分类处理决定是否重传和返回怎样的错误信息。如果 select 函数没有发现错误则使用 recvfrom 函数接收来自客户端的ACK包并进行检查判断。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;recv_len=recvfrom(socketfd,buf,BUF_SIZE,0,(sockaddr*)&amp;amp;client_addr,&amp;amp;client_addr_len);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最后计算传输速率即可。&lt;/p&gt;
&lt;h3 id=&#34;WRQ&#34;&gt;&lt;a href=&#34;#WRQ&#34; class=&#34;headerlink&#34; title=&#34;WRQ&#34;&gt;&lt;/a&gt;WRQ&lt;/h3&gt;&lt;p&gt;虽然是师从灰灰，但是也对一部分进行了修改和优化，也就是 WRQ 这一部分。灰灰的代码在这一部分，面对丢包和篡改的情况往往会发生服务器不断读取来自客户端的同一个 block 的数据，陷入死循环，一直将客户端某个 block 的数据写入目的文件。在调试后发现问题出现在 Server 在把选择新的块的时候并没有考虑客户端是否收到了 ACK 并且向下一个 block 移动，而是仅仅将 block++，对相关部分我们需要做出修改。&lt;/p&gt;
&lt;p&gt;依旧是在确定文件的指针无误后进入循环，一块块地接收数据，先将上一个包的 ACK 发送给客户端，然后接受数据包。&lt;/p&gt;
&lt;p&gt;在此处我们设置两个变量 &lt;code&gt;received_block&lt;/code&gt; 和 &lt;code&gt;expected_block&lt;/code&gt;，分别表示我们接受到的 block 编号和我们期望收到的 block 编号。如果两者一致的话则表明我们的数据传输没有任何问题，直接写入文件，并且期望下一个 block 。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;if (received_block == expected_block) &amp;#123;
    printf(&amp;quot;Received block NO.%hu\n&amp;quot;, received_block);
    tot_recv += recv_len - 4;
    fwrite(buf + 4, 1, recv_len - 4, file);  // 写入文件
    expected_block++;  // 仅在收到正确的数据包时递增
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;否则的话输出错误提示信息并且尝试再次发送ACK包以及接受数据，直到收到的 block 编号和期望的一致。&lt;/p&gt;
&lt;p&gt;最后就是统计传输速率以及发送最后一个块的ACK给客户端。&lt;/p&gt;
&lt;h2 id=&#34;code&#34;&gt;&lt;a href=&#34;#code&#34; class=&#34;headerlink&#34; title=&#34;code&#34;&gt;&lt;/a&gt;code&lt;/h2&gt;&lt;p&gt;本 blog 只讲述了一种最简单的实现方法（而且还没验收），需要代码详细解释的请移步灰灰的博客请教师祖大人捏。可视化的俺也没做，俺是菜狗。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;//g++ t.cpp -o tftp_server -lws2_32
#include &amp;lt;WinSock2.h&amp;gt;
#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;psdk_inc/_ip_types.h&amp;gt;
#include &amp;lt;psdk_inc/_socket_types.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;wingdi.h&amp;gt;
#include &amp;lt;winsock2.h&amp;gt;
#include &amp;lt;ws2tcpip.h&amp;gt;
#include &amp;lt;windows.h&amp;gt;
#include &amp;lt;bits/stdc++.h&amp;gt;

#pragma comment(lib, &amp;quot;ws2_32.lib&amp;quot;)

#define BUF_SIZE 516
#define DATA_SIZE 512
#define OPCODE_RRQ 1
#define OPCODE_WRQ 2
#define OPCODE_DATA 3
#define OPCODE_ACK 4
#define OPCODE_ERROR 5
#define MAX_RETRIES 10
#define TIMEOUT 5

using namespace std;

static const char *tftp_error_msg[] = &amp;#123;
    &amp;quot;Undefined error&amp;quot;,
    &amp;quot;File not found&amp;quot;,
    &amp;quot;Access violation&amp;quot;,
    &amp;quot;Disk full or allocation error&amp;quot;,
    &amp;quot;Illegal TFTP operation&amp;quot;,
    &amp;quot;Unknown transfer ID&amp;quot;,
    &amp;quot;File already exists&amp;quot;,
    &amp;quot;No such user&amp;quot;
&amp;#125;;
const char IP[30]=&amp;quot;0.0.0.0&amp;quot;;
const int PORT=6699;
int client_addr_len;

void record(char *ch)
&amp;#123;
    FILE *file;
    file=fopen(&amp;quot;record_log&amp;quot;,&amp;quot;w&amp;quot;);
    fwrite(ch,1,strlen(ch),file);
&amp;#125;

int gettimeofday(struct timeval* tp, struct timezone* tzp)
&amp;#123;
    if (tp == nullptr) return -1;

    struct _timeb timebuffer;
    _ftime(&amp;amp;timebuffer);

    tp-&amp;gt;tv_sec = static_cast&amp;lt;long&amp;gt;(timebuffer.time);      // 秒部分
    tp-&amp;gt;tv_usec = timebuffer.millitm * 1000;              // 将毫秒转换为微秒

    return 0;
&amp;#125;

struct ERRORthings
&amp;#123;
    short opcode;
    short error_code;
    char message[BUF_SIZE];
    void init(short _error_code,const char* _message)
    &amp;#123;
        opcode = 5; 
        error_code = _error_code;
        strcpy(message+4, _message); 
    &amp;#125;
    void work(int socketfd, sockaddr_in &amp;amp;client_addr)
    &amp;#123;
        memset(message, 0, BUF_SIZE);
        *(unsigned short*)message = htons(opcode);
        *(unsigned short*)(message + 2) = htons(error_code);
        int packet_length = 4 + strlen(message) + 1;
        int send_len = sendto(socketfd, message, packet_length, 0, (sockaddr *)&amp;amp;client_addr, client_addr_len);
    &amp;#125;
&amp;#125;;

class RRQ
&amp;#123;
    public:
    void work(const char *filename, const char *mode, int socketfd, struct sockaddr_in &amp;amp;client_addr)
    &amp;#123;
        FILE *file;
        if(strcmp(mode,&amp;quot;netascii&amp;quot;)==0)
            file=fopen(filename,&amp;quot;r&amp;quot;);
        else file=fopen(filename,&amp;quot;rb&amp;quot;);
        if(!file)
        &amp;#123;
            cerr&amp;lt;&amp;lt;&amp;quot;ERROR: Cannot open file for reading: &amp;quot;&amp;lt;&amp;lt;filename&amp;lt;&amp;lt;endl;
            ERRORthings packet;
            packet.init(1,tftp_error_msg[1]);
            packet.work(socketfd, client_addr);
            return ;
        &amp;#125;
        unsigned short block=1;
        int bytes_read=0,tot_send=0;;
        char buf[BUF_SIZE];
        char data_pac[BUF_SIZE];
        timeval start,end;
        gettimeofday(&amp;amp;start, NULL);
        do
        &amp;#123;
            memset(data_pac, 0, BUF_SIZE);
            *(unsigned short*)data_pac = htons(OPCODE_DATA);  // 操作码：数据包
            *(unsigned short*)(data_pac + 2) = htons(block);

            bytes_read=fread(data_pac+4,1,DATA_SIZE,file);
            int tot_retry=0;
            bool ack=false;
            if(bytes_read&amp;lt;0)
            &amp;#123;
                cerr&amp;lt;&amp;lt;&amp;quot;ERROR: Reading file&amp;quot;&amp;lt;&amp;lt;endl;
                ERRORthings packet;
                packet.init(0,&amp;quot;Read error&amp;quot;);
                packet.work(socketfd,client_addr);
                break;
            &amp;#125;
            int recv_len;
            while(!ack&amp;amp;&amp;amp;tot_retry&amp;lt;MAX_RETRIES)
            &amp;#123;
                sendto(socketfd, data_pac, bytes_read + 4, 0, (sockaddr*)&amp;amp;client_addr, client_addr_len);
                printf(&amp;quot;sending NO.%hu packet&amp;quot;, block);
                // 超时重传
                struct timeval tv;
                tv.tv_sec=TIMEOUT;
                tv.tv_usec=0;
                fd_set read_fds;
                FD_ZERO(&amp;amp;read_fds);
                FD_SET(socketfd, &amp;amp;read_fds);
                //传入ACK或超时
                int select_result = select(socketfd + 1, &amp;amp;read_fds, NULL, NULL, &amp;amp;tv);
                if(select_result&amp;gt;0)
                &amp;#123;
                    recv_len=recvfrom(socketfd,buf,BUF_SIZE,0,(sockaddr*)&amp;amp;client_addr,&amp;amp;client_addr_len);
                    if(recv_len&amp;gt;=4&amp;amp;&amp;amp;ntohs(*(unsigned short*)buf)==OPCODE_ACK&amp;amp;&amp;amp;ntohs(*(unsigned short*)(buf + 2))==block)
                    &amp;#123;
                        printf(&amp;quot;,recived NO.%hupacket\n&amp;quot;, block);
                        ack=true;
                    &amp;#125;
                    else
                    &amp;#123;
                        printf(&amp;quot;,ACK invalid,send NO.%hupacket again\n&amp;quot;, block);
                        tot_retry++;
                    &amp;#125;
                &amp;#125;
                else if(select_result==0)
                &amp;#123;
                    printf(&amp;quot;Timeout,retry sending NO.%hu packet\n&amp;quot;,block);
                    tot_retry++;
                &amp;#125;
                else
                &amp;#123;
                    perror(&amp;quot;select() error&amp;quot;);
                    fclose(file);
                    return ;
                &amp;#125;
            &amp;#125;
            tot_send+=bytes_read;
            block++;
        &amp;#125;while(bytes_read==DATA_SIZE);
        fclose(file);
        gettimeofday(&amp;amp;end, NULL);
        double time_taken=(end.tv_sec-start.tv_sec)+(end.tv_usec-start.tv_usec)/1000000.0;
        double throughput=tot_send/time_taken;
        cerr&amp;lt;&amp;lt;&amp;quot;Download throughput: &amp;quot;&amp;lt;&amp;lt;throughput/1024&amp;lt;&amp;lt;&amp;quot; KB/s&amp;quot;&amp;lt;&amp;lt;endl;
    &amp;#125;
&amp;#125;;

class WRQ
&amp;#123;
    public:
    void work(const char *filename, const char *mode, int socketfd, struct sockaddr_in &amp;amp;client_addr)
    &amp;#123;
        FILE *file;
        if(strcmp(mode,&amp;quot;netascii&amp;quot;)==0)
            file=fopen(filename,&amp;quot;w&amp;quot;);
        else file=fopen(filename,&amp;quot;wb&amp;quot;);
        if(!file)
        &amp;#123;
            cerr&amp;lt;&amp;lt;&amp;quot;ERROR: Cannot open file for writing: &amp;quot;&amp;lt;&amp;lt;filename&amp;lt;&amp;lt;endl;
            ERRORthings error_packet;
            error_packet.init(2,tftp_error_msg[2]);
            error_packet.work(socketfd, client_addr);
            return ;
        &amp;#125;
        int tot_recv=0,recv_len;
        unsigned short block=0;
        struct timeval start,end;
        char buf[BUF_SIZE];
        gettimeofday(&amp;amp;start, NULL);
        unsigned short expected_block = 1;  // TFTP WRQ开始时，第一个数据包的block是1
        do &amp;#123;
            memset(buf, 0, BUF_SIZE);

            // 发送ACK包
            *(unsigned short *)buf = htons(OPCODE_ACK);
            *(unsigned short *)(buf + 2) = htons(expected_block - 1);  // ACK上一块的block
            if (sendto(socketfd, buf, 4, 0, (sockaddr *)&amp;amp;client_addr, client_addr_len) &amp;lt; 0) &amp;#123;
                perror(&amp;quot;sendto failed&amp;quot;);
                fclose(file);
                return;
            &amp;#125;

            // 接收数据包
            recv_len = recvfrom(socketfd, buf, BUF_SIZE, 0, (sockaddr *)&amp;amp;client_addr, &amp;amp;client_addr_len);
            if (recv_len &amp;lt; 4 || ntohs(*(unsigned short *)buf) != OPCODE_DATA) &amp;#123;
                printf(&amp;quot;The packet received is not a valid data packet\n&amp;quot;);
                ERRORthings error_packet;
                error_packet.init(4, tftp_error_msg[4]);
                error_packet.work(socketfd, client_addr);
                fclose(file);
                return;
            &amp;#125;

            // 获取接收数据包的block编号
            unsigned short received_block = ntohs(*(unsigned short *)(buf + 2));

            if (received_block == expected_block) &amp;#123;
                printf(&amp;quot;Received block NO.%hu\n&amp;quot;, received_block);
                tot_recv += recv_len - 4;
                fwrite(buf + 4, 1, recv_len - 4, file);  // 写入文件
                expected_block++;  // 仅在收到正确的数据包时递增
            &amp;#125; else &amp;#123;
                printf(&amp;quot;Duplicate or out-of-order packet, expected block: %hu, received block: %hu\n&amp;quot;, expected_block, received_block);
            &amp;#125;
        &amp;#125; while (recv_len == DATA_SIZE + 4);
         memset(buf,0,BUF_SIZE);
        *(unsigned short*)buf = htons(OPCODE_ACK);
        *(unsigned short*)(buf + 2) = htons(expected_block-1);
        sendto(socketfd,buf,4,0,(sockaddr*)&amp;amp;client_addr,client_addr_len);
        fclose(file);
        gettimeofday(&amp;amp;end, NULL);
        double time_taken=(end.tv_sec-start.tv_sec)+(end.tv_usec-start.tv_usec)/1000000.0;
        double throughput=tot_recv/time_taken;
        cerr&amp;lt;&amp;lt;&amp;quot;Download throughput: &amp;quot;&amp;lt;&amp;lt;throughput/1024&amp;lt;&amp;lt;&amp;quot; KB/s&amp;quot;&amp;lt;&amp;lt;endl;
        fclose(file);
    &amp;#125;
&amp;#125;;

class TFTP_Solve
&amp;#123;
    private:
    int socketfd;
    sockaddr_in client_addr;
    char buf[BUF_SIZE];

    public:
    TFTP_Solve(int _socketfd,sockaddr_in &amp;amp;_client_addr): socketfd(_socketfd),client_addr(_client_addr)&amp;#123;&amp;#125;
    void Work_for_RRQ(const char *filname,const char *mode)
    &amp;#123;
        RRQ RRQproject;
        RRQproject.work(filname,mode,socketfd,client_addr);
    &amp;#125;
    void Work_for_WRQ(const char *filname,const char *mode)
    &amp;#123;
        WRQ WRQproject;
        WRQproject.work(filname,mode,socketfd,client_addr);
    &amp;#125;
    void work()
    &amp;#123;
        int rev_len=recvfrom(socketfd,buf,BUF_SIZE,0,(sockaddr *)&amp;amp;client_addr,&amp;amp;client_addr_len);
        if(rev_len&amp;lt;4)
        &amp;#123;
            cerr&amp;lt;&amp;lt;&amp;quot;ERROR: Can&amp;#39;t receive request&amp;quot;&amp;lt;&amp;lt;endl;
            ERRORthings packet;
            packet.init(4,tftp_error_msg[4]);
            packet.work(socketfd, client_addr);
            return ;
        &amp;#125;
        short opcode=ntohs(*(unsigned short *)buf);
        char *filename=buf+2;
        char *mode=filename+strlen(filename)+1;

        if (strcmp(mode, &amp;quot;netascii&amp;quot;) != 0 &amp;amp;&amp;amp; strcmp(mode, &amp;quot;octet&amp;quot;) != 0)
        &amp;#123;
            ERRORthings packet;
            packet.init(4,&amp;quot;Unsupported transfer mode.&amp;quot;);
            packet.work(socketfd, client_addr);
            return ;
        &amp;#125;

        if(opcode==OPCODE_RRQ) Work_for_RRQ(filename,mode);
        else if(opcode==OPCODE_WRQ) Work_for_WRQ(filename,mode);
        else if(opcode==OPCODE_ERROR);
        else
        &amp;#123;
            cerr&amp;lt;&amp;lt;&amp;quot;ERROR: Unknown request&amp;quot;&amp;lt;&amp;lt;endl;
            ERRORthings packet;
            packet.init(4,tftp_error_msg[4]);
            packet.work(socketfd,client_addr);
        &amp;#125;
    &amp;#125;
&amp;#125;;

class Server
&amp;#123;
    private:
    int socketfd;
    
    public:
    Server(): socketfd(-1)&amp;#123;&amp;#125;
    sockaddr_in getAddr(const char *ip,int port)
    &amp;#123;
        sockaddr_in addr;
        addr.sin_family = AF_INET;
        addr.sin_port = htons(port);
        addr.sin_addr.S_un.S_addr = INADDR_ANY;
        return addr;
    &amp;#125;
    void init()
    &amp;#123;
        socketfd = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
        if(socketfd&amp;lt;0)
        &amp;#123;
            cerr&amp;lt;&amp;lt;&amp;quot;Error creating socket...&amp;quot;&amp;lt;&amp;lt;endl;
            exit(1);
        &amp;#125;
        sockaddr_in server_addr = getAddr(IP, PORT);
        if (bind(socketfd, (struct sockaddr *) &amp;amp;server_addr, sizeof(server_addr)) &amp;lt; 0) &amp;#123;
            cerr&amp;lt;&amp;lt;&amp;quot;Bind local port failed!&amp;quot;&amp;lt;&amp;lt;endl;
            exit(1);
        &amp;#125;
        cerr&amp;lt;&amp;lt;&amp;quot;TFTP is successfully started on port &amp;quot;&amp;lt;&amp;lt;PORT&amp;lt;&amp;lt;&amp;quot; at IP address &amp;quot;&amp;lt;&amp;lt;IP&amp;lt;&amp;lt;endl;
    &amp;#125;
    void work()
    &amp;#123;
        while(true)
        &amp;#123;
            sockaddr_in client_addr; client_addr_len=sizeof(client_addr);
            TFTP_Solve project(socketfd,client_addr);
            project.work();
        &amp;#125;
    &amp;#125;
    ~Server()&amp;#123;if(socketfd!=-1) closesocket(socketfd);&amp;#125;
&amp;#125;;


int TFTP_init()
&amp;#123;
    WSADATA wsaData;
    int result = WSAStartup(MAKEWORD(2, 2), &amp;amp;wsaData); // 初始化 Winsock
    if (result != 0) &amp;#123;
        cerr&amp;lt;&amp;lt;&amp;quot;WSAStartup failed: &amp;quot;&amp;lt;&amp;lt;result&amp;lt;&amp;lt;endl;
        return 1;
    &amp;#125;
    printf(&amp;quot;Winsock initialized.\n&amp;quot;);
    return 0;
&amp;#125;

int main()
&amp;#123;
    TFTP_init();
    Server S; S.init(); S.work();
    return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://varuxn.github.io/2024/12/21/LateX/</guid>
            <title>LateX</title>
            <link>http://varuxn.github.io/2024/12/21/LateX/</link>
            <pubDate>Sat, 21 Dec 2024 20:42:53 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;组合数： &lt;code&gt;$\binom&amp;#123;n&amp;#125;&amp;#123;m&amp;#125;$&lt;/code&gt; $\binom{n}{m}$&lt;/p&gt;
&lt;p&gt;第一类斯特林数： &lt;code&gt;$n \brack m$&lt;/code&gt; $n \brack m$&lt;/p&gt;
&lt;p&gt;第二类斯特林数： &lt;code&gt;$n \brace m$&lt;/code&gt; $n \brace m$ 当然 &lt;code&gt;$\&amp;#123;_m^n\&amp;#125;$&lt;/code&gt; ${_m^n}$ 也可以,&lt;del&gt;但是可能会丑一些&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;分数： 小的 &lt;code&gt;$\frac&amp;#123;n&amp;#125;&amp;#123;m&amp;#125;$&lt;/code&gt; $\frac{n}{m}$ 大的 &lt;code&gt;$\dfrac&amp;#123;n&amp;#125;&amp;#123;m&amp;#125;$&lt;/code&gt; $\dfrac{n}{m}$&lt;/p&gt;
&lt;p&gt;大于等于： &lt;code&gt;$\ge$&lt;/code&gt; $\ge$ , 小于等于： &lt;code&gt;$\le$&lt;/code&gt; $\le$ , 不等于：&lt;code&gt;$\neq$&lt;/code&gt; $\neq$&lt;/p&gt;
&lt;p&gt;连加： &lt;code&gt;$\sum$&lt;/code&gt; $\sum$ , 连乘： &lt;code&gt;$\prod$&lt;/code&gt; $\prod$&lt;/p&gt;
&lt;p&gt;上下标搞到正上或者正下方： 在后面加上 &lt;code&gt;$\limits$&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;整行公式可以： &lt;code&gt;$\displaystyle$&lt;/code&gt; 配合 &lt;code&gt;$$  $$&lt;/code&gt; 使用效果更佳。&lt;/p&gt;
&lt;p&gt;点乘： &lt;code&gt;$\cdot$&lt;/code&gt; $\cdot$ ， 叉乘： &lt;code&gt;$\times$&lt;/code&gt; $\times$&lt;/p&gt;
&lt;p&gt;向上取整： &lt;code&gt;$\lceil x \rceil$&lt;/code&gt; $\lceil x \rceil$ ， 向下取整： &lt;code&gt;$\lfloor x \rfloor$&lt;/code&gt; $\lfloor x \rfloor$&lt;/p&gt;
&lt;p&gt;异或： &lt;code&gt;$\otimes$&lt;/code&gt; $\otimes$ 或者 &lt;code&gt;$^&amp;#123;\wedge&amp;#125;$&lt;/code&gt; $^{\wedge}$&lt;/p&gt;
&lt;p&gt;开方： &lt;code&gt;$\sqrt[n]&amp;#123;x&amp;#125;$&lt;/code&gt; $\sqrt[n]{x}$&lt;/p&gt;
&lt;p&gt;属于： &lt;code&gt;$\in$&lt;/code&gt; $\in$ ， 不属于： &lt;code&gt;$\notin$&lt;/code&gt; $\notin$&lt;/p&gt;
&lt;p&gt;同余： &lt;code&gt;$\equiv$&lt;/code&gt; $\equiv$ ， 不同余： &lt;code&gt;$\not\equiv$&lt;/code&gt; $\not\equiv$&lt;/p&gt;
&lt;p&gt;整除： &lt;code&gt;$\mid$&lt;/code&gt; $\mid$ ， 不整除： &lt;code&gt;$\nmid$&lt;/code&gt; $\nmid$&lt;/p&gt;
&lt;p&gt;空格： 小 &lt;code&gt;$\;$&lt;/code&gt; $;$， 中 &lt;code&gt;$\quad$&lt;/code&gt; $\quad$， 大 &lt;code&gt;$\qquad$&lt;/code&gt; $\qquad$&lt;/p&gt;
&lt;p&gt;各种包含： &lt;code&gt;$\subset$&lt;/code&gt; $\subset$ ， &lt;code&gt;$\supset$&lt;/code&gt; $\supset$ ， &lt;code&gt;$\subseteq$&lt;/code&gt; $\subseteq$ ， &lt;code&gt;$\supseteq$&lt;/code&gt;  $\supseteq$&lt;/p&gt;
&lt;p&gt;让字符变大 &lt;code&gt;$\big[$&lt;/code&gt; $\big[$ ， &lt;code&gt;$\Big[$&lt;/code&gt; $\Big[$&lt;/p&gt;
&lt;p&gt;还有一堆花里呼哨的符号： &lt;code&gt;$\phi$&lt;/code&gt; $\phi$ &lt;code&gt;$\varphi$&lt;/code&gt; $\varphi$ &lt;code&gt;$\Omega$&lt;/code&gt; $\Omega$ &lt;code&gt;$\omega$&lt;/code&gt; $\omega$ &lt;code&gt;$\infty$&lt;/code&gt; $\infty$&lt;/p&gt;
&lt;p&gt;部分内容来自 &lt;a href=&#34;https://www.cnblogs.com/wxyww/p/latex.html&#34;&gt;https://www.cnblogs.com/wxyww/p/latex.html&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
